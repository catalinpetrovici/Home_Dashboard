// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_URL")
}

// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference

model User {
  id               String           @id @unique @default(cuid())
  lastName         String           @map("last_name") @db.VarChar(20)
  firstName        String           @map("first_name") @db.VarChar(20)
  email            String           @unique
  phoneNumber      String           @unique @map("phone_number")
  role             Role             @default(UNVERIFIED)
  createdAt        DateTime         @default(dbgenerated("now()")) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  verificationCode String?          @map("verification_code")
  password         String           @unique
  userPreferences  UserPreferences?
  UserAuthLog      UserAuthLog[]
  Session          UserSession[]

  @@index([email])
  @@map("users")
}

model UserSession {
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_session")
}

model UserPreferences {
  userId   String  @unique @map("user_id")
  darkMode Boolean @default(true) @map("dark_mode")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserAuthLog {
  userId    String   @map("user_id")
  logDate   DateTime @default(dbgenerated("now()")) @map("log_date")
  eventType String   @map("event_type")
  userAgent String   @map("user_agent")
  message   String?  @db.Text
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, logDate])
  @@map("users_auth_log")
}

model Device {
  id           String        @id @unique @default(cuid())
  deviceName   String        @unique @map("device_name")
  deviceFamily String        @map("device_family")
  status       Status        @default(UNKNOWN)
  createdAt    DateTime      @default(dbgenerated("now()")) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  topic        TopicDevice[]

  @@map("device")
}

model TopicDevice {
  id               String             @id @unique @default(cuid())
  deviceId         String?            @map("device_id")
  topic            String             @unique
  qos              Int
  topicName        String             @map("topic_name")
  deviceType       DeviceType         @default(UNSPECIFIED) @map("device_type")
  dataType         DataType           @map("data_type")
  isDataRecorded   Boolean            @default(false) @map("is_data_recorded")
  columnDashboard  Int?               @map("column_dashboard")
  lineDashboard    Int?               @map("line_dashboard")
  createdAt        DateTime           @default(dbgenerated("now()")) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  Device           Device?            @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  topicRecord      TopicRecord[]
  topicRecordByDay TopicRecordByDay[]

  @@map("topic_device")
}

model TopicRecord {
  topicId   String       @map("topic_id")
  createdAt DateTime     @default(dbgenerated("now()")) @map("created_at")
  data      String
  topic     TopicDevice? @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([topicId, createdAt])
  @@map("topic_record")
}

model TopicRecordByDay {
  topicId   String       @map("topic_id")
  createdAt DateTime     @default(dbgenerated("now()")) @map("created_at")
  data      Json
  topic     TopicDevice? @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([topicId, createdAt])
  @@map("topic_record_by_day")
}

model Schedule {
  id        String   @id @unique @default(cuid())
  name      String   @unique
  rule      String
  repeat    Repeat
  topic     String
  message   String
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at")

  @@map("schedule")
}

enum DataType {
  BOOLEAN
  STRING
  NUMBER
}

enum DeviceType {
  UNSPECIFIED
  STATUS
  HUMIDITY
  TEMPERATURE
  ELECTRICPOWER
  MOTIONSENSOR
  LEDSTRIP
  SWITCH
  SLIDER
  DISPLAY
  TEXT
}

enum Role {
  BASIC
  ADMIN
  UNVERIFIED
  LOST
  BLOCKED
}

enum Status {
  UNKNOWN
  ONLINE
  OFFLINE
}

enum Repeat {
  ONCE
  INTERVAL
  INTERVAL_BETWEEN_TIMES
  AT_SPECIFIC_TIME
}
